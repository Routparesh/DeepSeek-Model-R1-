name: Deploy DeepSeek Model R1
on:
  push:
    branches:
      - master

env:
  AWS_REGION: ap-south-1
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.7

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        continue-on-error: false

      - name: Terraform Validate
        run: terraform validate
        continue-on-error: false

      - name: Terraform Plan
        run: |
          terraform plan \
            -no-color \
            -input=false \
            -out=tfplan
        continue-on-error: true

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Extract Terraform Outputs
        id: tf-outputs
        run: |
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip || echo "")
          LB_DNS=$(terraform output -raw load_balancer_dns || echo "")
          
          if [ -z "$EC2_PUBLIC_IP" ]; then
            echo "Failed to retrieve EC2 public IP"
            exit 1
          fi
          
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "LB_DNS=$LB_DNS" >> $GITHUB_OUTPUT

      - name: Prepare SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > my-key.pem
          chmod 600 my-key.pem

      - name: Stop Existing Containers
        run: |
          ssh -o StrictHostKeyChecking=no -i my-key.pem ubuntu@${{ steps.tf-outputs.outputs.EC2_PUBLIC_IP }} <<EOF
          docker stop deepseek-webui || true
          docker stop deepseek-model || true
          docker rm deepseek-webui || true
          docker rm deepseek-model || true
          EOF

      - name: Install Docker
        run: |
          ssh -o StrictHostKeyChecking=no -i my-key.pem ubuntu@${{ steps.tf-outputs.outputs.EC2_PUBLIC_IP }} <<EOF
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl enable docker
          sudo systemctl start docker
          sudo usermod -aG docker ubuntu
          EOF

      - name: Pull Docker Images
        run: |
          ssh -o StrictHostKeyChecking=no -i my-key.pem ubuntu@${{ steps.tf-outputs.outputs.EC2_PUBLIC_IP }} <<EOF
          docker pull openwebui/ollama-webui
          docker pull deepseek-model:latest
          EOF

      - name: Run DeepSeek Model and WebUI
        run: |
          ssh -o StrictHostKeyChecking=no -i my-key.pem ubuntu@${{ steps.tf-outputs.outputs.EC2_PUBLIC_IP }} <<EOF
          docker run -d \
            -p 8080:8080 \
            --name deepseek-webui \
            --restart unless-stopped \
            openwebui/ollama-webui
          
          docker run -d \
            --name deepseek-model \
            --restart unless-stopped \
            deepseek-model:latest
          EOF

      - name: Verify WebUI Deployment
        run: |
          sleep 30  # Wait for containers to start
          ssh -o StrictHostKeyChecking=no -i my-key.pem ubuntu@${{ steps.tf-outputs.outputs.EC2_PUBLIC_IP }} <<EOF
          docker ps | grep deepseek-webui
          docker ps | grep deepseek-model
          curl -f http://localhost:8080 || exit 1
          EOF

      - name: Cleanup SSH Key
        if: always()
        run: rm -f my-key.pem

      - name: Output Deployment Information
        run: |
          echo "Deployment Complete"
          echo "EC2 Public IP: ${{ steps.tf-outputs.outputs.EC2_PUBLIC_IP }}"
          echo "Load Balancer DNS: ${{ steps.tf-outputs.outputs.LB_DNS }}"
